AWSTemplateFormatVersion: 2010-09-09
Description: Api Gateway websockets lambda - Batalha naval

Parameters:
  projectName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project
  bucketName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project-bucket-lambda-code
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev

Resources:
# Lambda app
  ## Bucket com o código da função
  bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketName

  ## Função IAM da lambda
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                Resource: !GetAtt dynamoDbUsersTable.Arn

  ## Função lambda
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: Lambda function
      FunctionName: !Sub ${projectName}
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables: 
          USERS_DB: !Sub ${projectName}-users
          API_ENDPOINT: !GetAtt apiGateway.ApiEndpoint
          STAGE_NAME: !Ref apiGatewayStageName

  ## Logs
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${projectName}
      RetentionInDays: 90

# Api Gateway
  ## Api
  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref projectName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: $request.header.x-api-key

  ## Lambda permission
  lambdaPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      FunctionName: !Ref lambdaFunction
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/*/*'

  ## Integração das rotas com a lambda
  routesIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref apiGateway
      Description: Routes Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: 
        Fn::Sub:
            arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaFunction.Arn}/invocations

  ## Routes
  ### Connect
  connectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref routesIntegration

  ### Disconnect
  disconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref routesIntegration

  ### Default
  defaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $default
      AuthorizationType: NONE
      OperationName: DefaultRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref routesIntegration

  ## Deploy
  deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - connectRoute
      - disconnectRoute
      - defaultRoute
    Properties:
      ApiId: !Ref apiGateway

  ## Estágio do deploy
  stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: !Ref apiGatewayStageName
      Description: Api Gateway Stage
      DeploymentId: !Ref deployment
      ApiId: !Ref apiGateway

# DynamoDB tables
  ## Tabela para quem está buscando jogo
  dynamoDbSearchGameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${projectName}-searching-game
      AttributeDefinitions: 
        - 
          AttributeName: connectionId
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: connectionId
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
  
  ## Tabela dos jogos
  dynamoDbGameTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${projectName}-game
      AttributeDefinitions: 
        - 
          AttributeName: id
          AttributeType: "N"
        -
          AttributeName: redPlayer
          AttributeType: "S"
        -
          AttributeName: bluePlayer
          AttributeType: "S"
        -
          AttributeName: redSide
          AttributeType: "S"
        -
          AttributeName: blueSide
          AttributeType: "S"
        -
          AttributeName: toRedBlueSide
          AttributeType: "S"
        -
          AttributeName: toBlueRedSide
          AttributeType: "S"
        -
          AttributeName: created_at
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: id
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10

Outputs:
  WebsocketUrl:
    Description: Url to connect to server
    Value: !Sub ${apiGateway.ApiEndpoint}/${apiGatewayStageName} 